// Code generated by protoc-gen-go. DO NOT EDIT.
// source: todo.proto

package todo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Greeting struct {
	First                string   `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Second               string   `protobuf:"bytes,2,opt,name=second,proto3" json:"second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Greeting) Reset()         { *m = Greeting{} }
func (m *Greeting) String() string { return proto.CompactTextString(m) }
func (*Greeting) ProtoMessage()    {}
func (*Greeting) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{0}
}

func (m *Greeting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Greeting.Unmarshal(m, b)
}
func (m *Greeting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Greeting.Marshal(b, m, deterministic)
}
func (m *Greeting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Greeting.Merge(m, src)
}
func (m *Greeting) XXX_Size() int {
	return xxx_messageInfo_Greeting.Size(m)
}
func (m *Greeting) XXX_DiscardUnknown() {
	xxx_messageInfo_Greeting.DiscardUnknown(m)
}

var xxx_messageInfo_Greeting proto.InternalMessageInfo

func (m *Greeting) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *Greeting) GetSecond() string {
	if m != nil {
		return m.Second
	}
	return ""
}

type GreetRequest struct {
	Greet                *Greeting `protobuf:"bytes,1,opt,name=greet,proto3" json:"greet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GreetRequest) Reset()         { *m = GreetRequest{} }
func (m *GreetRequest) String() string { return proto.CompactTextString(m) }
func (*GreetRequest) ProtoMessage()    {}
func (*GreetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{1}
}

func (m *GreetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreetRequest.Unmarshal(m, b)
}
func (m *GreetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreetRequest.Marshal(b, m, deterministic)
}
func (m *GreetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreetRequest.Merge(m, src)
}
func (m *GreetRequest) XXX_Size() int {
	return xxx_messageInfo_GreetRequest.Size(m)
}
func (m *GreetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GreetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GreetRequest proto.InternalMessageInfo

func (m *GreetRequest) GetGreet() *Greeting {
	if m != nil {
		return m.Greet
	}
	return nil
}

type GreetResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GreetResponse) Reset()         { *m = GreetResponse{} }
func (m *GreetResponse) String() string { return proto.CompactTextString(m) }
func (*GreetResponse) ProtoMessage()    {}
func (*GreetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{2}
}

func (m *GreetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreetResponse.Unmarshal(m, b)
}
func (m *GreetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreetResponse.Marshal(b, m, deterministic)
}
func (m *GreetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreetResponse.Merge(m, src)
}
func (m *GreetResponse) XXX_Size() int {
	return xxx_messageInfo_GreetResponse.Size(m)
}
func (m *GreetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GreetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GreetResponse proto.InternalMessageInfo

func (m *GreetResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*Greeting)(nil), "todo.Greeting")
	proto.RegisterType((*GreetRequest)(nil), "todo.GreetRequest")
	proto.RegisterType((*GreetResponse)(nil), "todo.GreetResponse")
}

func init() { proto.RegisterFile("todo.proto", fileDescriptor_0e4b95d0c4e09639) }

var fileDescriptor_0e4b95d0c4e09639 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0xcd, 0x60, 0x07, 0xbd, 0xea, 0x08, 0x57, 0x91, 0xc1, 0x95, 0x04, 0xc1, 0x59, 0x0d,
	0x43, 0x75, 0xe1, 0x4a, 0x17, 0x22, 0xee, 0x3b, 0xf8, 0x00, 0xb5, 0xbd, 0x96, 0x40, 0x4d, 0xea,
	0x4d, 0x5a, 0xe8, 0xda, 0x17, 0x97, 0xfc, 0x14, 0x74, 0xa7, 0xb3, 0xcb, 0x39, 0xe1, 0xfb, 0x0e,
	0x21, 0x00, 0xce, 0xd4, 0x66, 0xdd, 0xb1, 0x71, 0x06, 0xf7, 0xfd, 0x59, 0xde, 0xc3, 0xc1, 0x0b,
	0x13, 0x39, 0xa5, 0x1b, 0x3c, 0x87, 0xec, 0x5d, 0xb1, 0x75, 0x4b, 0x71, 0x25, 0x56, 0x87, 0x45,
	0x0c, 0x78, 0x01, 0x73, 0x4b, 0x95, 0xd1, 0xf5, 0x72, 0x16, 0xea, 0x94, 0xe4, 0x1d, 0x1c, 0x07,
	0xb2, 0xa0, 0xcf, 0x9e, 0xac, 0xc3, 0x6b, 0xc8, 0x1a, 0x9f, 0x03, 0x7d, 0x94, 0x2f, 0xd6, 0x61,
	0x6b, 0x92, 0x17, 0xf1, 0x52, 0xde, 0xc0, 0x49, 0xa2, 0x6c, 0x67, 0xb4, 0x25, 0xaf, 0x67, 0xb2,
	0x7d, 0x3b, 0xad, 0xa6, 0x94, 0x7f, 0xcd, 0x92, 0x7f, 0x4b, 0x3c, 0xa8, 0x8a, 0x30, 0x87, 0xec,
	0x55, 0x97, 0x3c, 0x22, 0xfe, 0x30, 0xa7, 0xf1, 0xcb, 0xb3, 0x5f, 0x5d, 0x54, 0xcb, 0x3d, 0x7c,
	0x80, 0x53, 0x8f, 0x13, 0x6f, 0x1d, 0x53, 0xf9, 0xe1, 0x1f, 0xf9, 0x77, 0x7a, 0x23, 0x3c, 0xff,
	0xd4, 0x2a, 0xd2, 0x6e, 0x17, 0x7e, 0x25, 0xf0, 0x11, 0x16, 0x91, 0x7c, 0x1e, 0x88, 0x47, 0xa3,
	0xe9, 0x5f, 0xf8, 0x46, 0xbc, 0xcd, 0xc3, 0x5f, 0xdd, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xee,
	0x5a, 0xfb, 0x43, 0xb9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreetServiceClient interface {
	// Unary, will throw Exception if GreetRequest.first is an empty string
	Unary(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	// Server Streaming
	ServerStreaming(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (GreetService_ServerStreamingClient, error)
	// Client Streaming
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_ClientStreamingClient, error)
	// Bidi Streaming
	StreamEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetService_StreamEveryoneClient, error)
}

type greetServiceClient struct {
	cc *grpc.ClientConn
}

func NewGreetServiceClient(cc *grpc.ClientConn) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) Unary(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/todo.GreetService/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) ServerStreaming(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (GreetService_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GreetService_serviceDesc.Streams[0], "/todo.GreetService/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_ServerStreamingClient interface {
	Recv() (*GreetResponse, error)
	grpc.ClientStream
}

type greetServiceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceServerStreamingClient) Recv() (*GreetResponse, error) {
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GreetService_serviceDesc.Streams[1], "/todo.GreetService/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceClientStreamingClient{stream}
	return x, nil
}

type GreetService_ClientStreamingClient interface {
	Send(*GreetRequest) error
	CloseAndRecv() (*GreetResponse, error)
	grpc.ClientStream
}

type greetServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceClientStreamingClient) Send(m *GreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceClientStreamingClient) CloseAndRecv() (*GreetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) StreamEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetService_StreamEveryoneClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GreetService_serviceDesc.Streams[2], "/todo.GreetService/StreamEveryone", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceStreamEveryoneClient{stream}
	return x, nil
}

type GreetService_StreamEveryoneClient interface {
	Send(*GreetRequest) error
	Recv() (*GreetResponse, error)
	grpc.ClientStream
}

type greetServiceStreamEveryoneClient struct {
	grpc.ClientStream
}

func (x *greetServiceStreamEveryoneClient) Send(m *GreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceStreamEveryoneClient) Recv() (*GreetResponse, error) {
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
type GreetServiceServer interface {
	// Unary, will throw Exception if GreetRequest.first is an empty string
	Unary(context.Context, *GreetRequest) (*GreetResponse, error)
	// Server Streaming
	ServerStreaming(*GreetRequest, GreetService_ServerStreamingServer) error
	// Client Streaming
	ClientStreaming(GreetService_ClientStreamingServer) error
	// Bidi Streaming
	StreamEveryone(GreetService_StreamEveryoneServer) error
}

// UnimplementedGreetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (*UnimplementedGreetServiceServer) Unary(ctx context.Context, req *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (*UnimplementedGreetServiceServer) ServerStreaming(req *GreetRequest, srv GreetService_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (*UnimplementedGreetServiceServer) ClientStreaming(srv GreetService_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (*UnimplementedGreetServiceServer) StreamEveryone(srv GreetService_StreamEveryoneServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEveryone not implemented")
}

func RegisterGreetServiceServer(s *grpc.Server, srv GreetServiceServer) {
	s.RegisterService(&_GreetService_serviceDesc, srv)
}

func _GreetService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.GreetService/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).Unary(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).ServerStreaming(m, &greetServiceServerStreamingServer{stream})
}

type GreetService_ServerStreamingServer interface {
	Send(*GreetResponse) error
	grpc.ServerStream
}

type greetServiceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceServerStreamingServer) Send(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).ClientStreaming(&greetServiceClientStreamingServer{stream})
}

type GreetService_ClientStreamingServer interface {
	SendAndClose(*GreetResponse) error
	Recv() (*GreetRequest, error)
	grpc.ServerStream
}

type greetServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceClientStreamingServer) SendAndClose(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceClientStreamingServer) Recv() (*GreetRequest, error) {
	m := new(GreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_StreamEveryone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).StreamEveryone(&greetServiceStreamEveryoneServer{stream})
}

type GreetService_StreamEveryoneServer interface {
	Send(*GreetResponse) error
	Recv() (*GreetRequest, error)
	grpc.ServerStream
}

type greetServiceStreamEveryoneServer struct {
	grpc.ServerStream
}

func (x *greetServiceStreamEveryoneServer) Send(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceStreamEveryoneServer) Recv() (*GreetRequest, error) {
	m := new(GreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GreetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "todo.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _GreetService_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _GreetService_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreaming",
			Handler:       _GreetService_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamEveryone",
			Handler:       _GreetService_StreamEveryone_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "todo.proto",
}
