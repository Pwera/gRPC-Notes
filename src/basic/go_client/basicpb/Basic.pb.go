// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Basic.proto

package basicpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BasicRequest struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BasicRequest) Reset()         { *m = BasicRequest{} }
func (m *BasicRequest) String() string { return proto.CompactTextString(m) }
func (*BasicRequest) ProtoMessage()    {}
func (*BasicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_82130616f05afc60, []int{0}
}

func (m *BasicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicRequest.Unmarshal(m, b)
}
func (m *BasicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicRequest.Marshal(b, m, deterministic)
}
func (m *BasicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicRequest.Merge(m, src)
}
func (m *BasicRequest) XXX_Size() int {
	return xxx_messageInfo_BasicRequest.Size(m)
}
func (m *BasicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BasicRequest proto.InternalMessageInfo

func (m *BasicRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *BasicRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type BasicResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BasicResponse) Reset()         { *m = BasicResponse{} }
func (m *BasicResponse) String() string { return proto.CompactTextString(m) }
func (*BasicResponse) ProtoMessage()    {}
func (*BasicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82130616f05afc60, []int{1}
}

func (m *BasicResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicResponse.Unmarshal(m, b)
}
func (m *BasicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicResponse.Marshal(b, m, deterministic)
}
func (m *BasicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicResponse.Merge(m, src)
}
func (m *BasicResponse) XXX_Size() int {
	return xxx_messageInfo_BasicResponse.Size(m)
}
func (m *BasicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BasicResponse proto.InternalMessageInfo

func (m *BasicResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *BasicResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*BasicRequest)(nil), "pb.BasicRequest")
	proto.RegisterType((*BasicResponse)(nil), "pb.BasicResponse")
}

func init() { proto.RegisterFile("Basic.proto", fileDescriptor_82130616f05afc60) }

var fileDescriptor_82130616f05afc60 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x4d, 0x60, 0x13, 0x9f, 0x3a, 0x34, 0xca, 0x28, 0x9e, 0x4a, 0x4f, 0x3d, 0x85, 0xa1,
	0xc2, 0xee, 0x9d, 0x57, 0x41, 0x3a, 0xbc, 0x78, 0x4b, 0xb6, 0x87, 0x3c, 0xd8, 0x92, 0x98, 0xa4,
	0x93, 0x7d, 0x11, 0x3f, 0xaf, 0xb4, 0x0b, 0xa3, 0x7a, 0x5a, 0x4f, 0xc9, 0xff, 0x91, 0xdf, 0xef,
	0x1f, 0x78, 0x70, 0x59, 0xa9, 0x40, 0x2b, 0xe9, 0xbc, 0x8d, 0x56, 0x70, 0xa7, 0x8b, 0x67, 0xb8,
	0xea, 0x46, 0x35, 0x7e, 0x35, 0x18, 0xa2, 0xb8, 0x87, 0xd1, 0x4e, 0x6d, 0x1a, 0xcc, 0x58, 0xce,
	0xca, 0x8b, 0xfa, 0x10, 0xc4, 0x04, 0x38, 0xad, 0x33, 0x9e, 0xb3, 0x72, 0x54, 0x73, 0x5a, 0x17,
	0x73, 0xb8, 0x4e, 0x54, 0x70, 0xd6, 0x04, 0x14, 0x53, 0x18, 0x87, 0xa8, 0x62, 0x13, 0x12, 0x97,
	0xd2, 0x7f, 0xf0, 0xf1, 0x87, 0xa7, 0xbe, 0x25, 0xfa, 0x1d, 0xad, 0x50, 0xcc, 0x61, 0xf2, 0xba,
	0x4f, 0xe1, 0xdd, 0x28, 0xbf, 0x17, 0x37, 0xd2, 0x69, 0xd9, 0xff, 0xd3, 0xc3, 0x6d, 0x6f, 0x72,
	0xe8, 0x2b, 0xce, 0xc4, 0x02, 0xb2, 0x23, 0xd8, 0x1e, 0xe8, 0x97, 0xd1, 0xa3, 0xda, 0x92, 0xf9,
	0x3c, 0x51, 0x31, 0x63, 0x7f, 0x24, 0x8b, 0x0d, 0xa1, 0x89, 0x43, 0x25, 0x65, 0x2b, 0x99, 0x1e,
	0x25, 0x15, 0xbd, 0xd0, 0x70, 0xc5, 0x8c, 0x55, 0x39, 0xdc, 0x6d, 0x51, 0x3a, 0xb2, 0xd1, 0xcb,
	0x6f, 0xf4, 0x4a, 0xea, 0xf6, 0xd1, 0x1b, 0xfb, 0x38, 0xef, 0x2e, 0x4e, 0xeb, 0x71, 0xb7, 0xb4,
	0xa7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x33, 0xf1, 0xaf, 0xc3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BasicServiceClient is the client API for BasicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BasicServiceClient interface {
	// Unary call
	MyServiceUnary(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	// Server Streaming
	MyServiceServerStreaming(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (BasicService_MyServiceServerStreamingClient, error)
	// Client Streaming
	MyServiceClientStreaming(ctx context.Context, opts ...grpc.CallOption) (BasicService_MyServiceClientStreamingClient, error)
	// BiDi Streaming
	MyServiceBiDiStreaming(ctx context.Context, opts ...grpc.CallOption) (BasicService_MyServiceBiDiStreamingClient, error)
}

type basicServiceClient struct {
	cc *grpc.ClientConn
}

func NewBasicServiceClient(cc *grpc.ClientConn) BasicServiceClient {
	return &basicServiceClient{cc}
}

func (c *basicServiceClient) MyServiceUnary(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, "/pb.BasicService/MyServiceUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicServiceClient) MyServiceServerStreaming(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (BasicService_MyServiceServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BasicService_serviceDesc.Streams[0], "/pb.BasicService/MyServiceServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &basicServiceMyServiceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BasicService_MyServiceServerStreamingClient interface {
	Recv() (*BasicResponse, error)
	grpc.ClientStream
}

type basicServiceMyServiceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *basicServiceMyServiceServerStreamingClient) Recv() (*BasicResponse, error) {
	m := new(BasicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *basicServiceClient) MyServiceClientStreaming(ctx context.Context, opts ...grpc.CallOption) (BasicService_MyServiceClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BasicService_serviceDesc.Streams[1], "/pb.BasicService/MyServiceClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &basicServiceMyServiceClientStreamingClient{stream}
	return x, nil
}

type BasicService_MyServiceClientStreamingClient interface {
	Send(*BasicRequest) error
	CloseAndRecv() (*BasicResponse, error)
	grpc.ClientStream
}

type basicServiceMyServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *basicServiceMyServiceClientStreamingClient) Send(m *BasicRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *basicServiceMyServiceClientStreamingClient) CloseAndRecv() (*BasicResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BasicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *basicServiceClient) MyServiceBiDiStreaming(ctx context.Context, opts ...grpc.CallOption) (BasicService_MyServiceBiDiStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BasicService_serviceDesc.Streams[2], "/pb.BasicService/MyServiceBiDiStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &basicServiceMyServiceBiDiStreamingClient{stream}
	return x, nil
}

type BasicService_MyServiceBiDiStreamingClient interface {
	Send(*BasicRequest) error
	Recv() (*BasicResponse, error)
	grpc.ClientStream
}

type basicServiceMyServiceBiDiStreamingClient struct {
	grpc.ClientStream
}

func (x *basicServiceMyServiceBiDiStreamingClient) Send(m *BasicRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *basicServiceMyServiceBiDiStreamingClient) Recv() (*BasicResponse, error) {
	m := new(BasicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BasicServiceServer is the server API for BasicService service.
type BasicServiceServer interface {
	// Unary call
	MyServiceUnary(context.Context, *BasicRequest) (*BasicResponse, error)
	// Server Streaming
	MyServiceServerStreaming(*BasicRequest, BasicService_MyServiceServerStreamingServer) error
	// Client Streaming
	MyServiceClientStreaming(BasicService_MyServiceClientStreamingServer) error
	// BiDi Streaming
	MyServiceBiDiStreaming(BasicService_MyServiceBiDiStreamingServer) error
}

// UnimplementedBasicServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBasicServiceServer struct {
}

func (*UnimplementedBasicServiceServer) MyServiceUnary(ctx context.Context, req *BasicRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyServiceUnary not implemented")
}
func (*UnimplementedBasicServiceServer) MyServiceServerStreaming(req *BasicRequest, srv BasicService_MyServiceServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method MyServiceServerStreaming not implemented")
}
func (*UnimplementedBasicServiceServer) MyServiceClientStreaming(srv BasicService_MyServiceClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method MyServiceClientStreaming not implemented")
}
func (*UnimplementedBasicServiceServer) MyServiceBiDiStreaming(srv BasicService_MyServiceBiDiStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method MyServiceBiDiStreaming not implemented")
}

func RegisterBasicServiceServer(s *grpc.Server, srv BasicServiceServer) {
	s.RegisterService(&_BasicService_serviceDesc, srv)
}

func _BasicService_MyServiceUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServiceServer).MyServiceUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BasicService/MyServiceUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServiceServer).MyServiceUnary(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicService_MyServiceServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BasicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BasicServiceServer).MyServiceServerStreaming(m, &basicServiceMyServiceServerStreamingServer{stream})
}

type BasicService_MyServiceServerStreamingServer interface {
	Send(*BasicResponse) error
	grpc.ServerStream
}

type basicServiceMyServiceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *basicServiceMyServiceServerStreamingServer) Send(m *BasicResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BasicService_MyServiceClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BasicServiceServer).MyServiceClientStreaming(&basicServiceMyServiceClientStreamingServer{stream})
}

type BasicService_MyServiceClientStreamingServer interface {
	SendAndClose(*BasicResponse) error
	Recv() (*BasicRequest, error)
	grpc.ServerStream
}

type basicServiceMyServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *basicServiceMyServiceClientStreamingServer) SendAndClose(m *BasicResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *basicServiceMyServiceClientStreamingServer) Recv() (*BasicRequest, error) {
	m := new(BasicRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BasicService_MyServiceBiDiStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BasicServiceServer).MyServiceBiDiStreaming(&basicServiceMyServiceBiDiStreamingServer{stream})
}

type BasicService_MyServiceBiDiStreamingServer interface {
	Send(*BasicResponse) error
	Recv() (*BasicRequest, error)
	grpc.ServerStream
}

type basicServiceMyServiceBiDiStreamingServer struct {
	grpc.ServerStream
}

func (x *basicServiceMyServiceBiDiStreamingServer) Send(m *BasicResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *basicServiceMyServiceBiDiStreamingServer) Recv() (*BasicRequest, error) {
	m := new(BasicRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BasicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BasicService",
	HandlerType: (*BasicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyServiceUnary",
			Handler:    _BasicService_MyServiceUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MyServiceServerStreaming",
			Handler:       _BasicService_MyServiceServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MyServiceClientStreaming",
			Handler:       _BasicService_MyServiceClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MyServiceBiDiStreaming",
			Handler:       _BasicService_MyServiceBiDiStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Basic.proto",
}
